/*
 * Metal API
 *
 * This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.
 *
 * API version: 1.0.0
 * Contact: support@equinixmetal.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package startapi

import (
	"context"
	"fmt"
	"net/http"
	"os"

	"github.com/gin-gonic/gin"
)

// FindDeviceEvents - Retrieve device's events
func FindDeviceEvents(c *gin.Context) {
	id := c.Param("id")
	//include := []string{"Inner_example"} // []string | Nested attributes to include. Included objects will return their full attributes. Attribute names can be dotted (up to 3 levels) to included deeply nested objects. (optional)
	//exclude := []string{"Inner_example"} // []string | Nested attributes to exclude. Excluded objects will return only the href attribute. Attribute names can be dotted (up to 3 levels) to exclude deeply nested objects. (optional)
	page := int32(1)      // int32 | Page to return (optional) (default to 1)
	perPage := int32(100) // int32 | Items returned per page (optional) (default to 10)
	resp, r, err := apiClient.EventsApi.FindDeviceEvents(context.Background(), id).Page(page).PerPage(perPage).Execute()
	if err != nil {
		fmt.Fprintf(os.Stderr, "Error when calling `EventsApi.FindDeviceEvents``: %v\n", err)
		fmt.Fprintf(os.Stderr, "Full HTTP response: %v\n", r)
	}
	c.JSON(http.StatusOK, resp)
}

// FindEventById - Retrieve an event
func FindEventById(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// FindEvents - Retrieve current user's events
func FindEvents(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// FindInterconnectionEvents - Retrieve interconnection events
func FindInterconnectionEvents(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// FindInterconnectionPortEvents - Retrieve interconnection port events
func FindInterconnectionPortEvents(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// FindOrganizationEvents - Retrieve organization's events
func FindOrganizationEvents(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// FindProjectEvents - Retrieve project's events
func FindProjectEvents(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// FindVirtualCircuitEvents - Retrieve interconnection events
func FindVirtualCircuitEvents(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}
