/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// DeviceCreateInFacilityInputAllOf struct for DeviceCreateInFacilityInputAllOf
type DeviceCreateInFacilityInputAllOf struct {
	// The datacenter where the device should be created.  Either metro or facility must be provided.  The API will accept either a single facility `{ \"facility\": \"f1\" }`, or it can be instructed to create the device in the best available datacenter `{ \"facility\": \"any\" }`.  Additionally it is possible to set a prioritized location selection. For example `{ \"facility\": [\"f3\", \"f2\", \"any\"] }` can be used to prioritize `f3` and then `f2` before accepting `any` facility. If none of the facilities provided have availability for the requested device the request will fail.
	Facility NullableAnyOfarraystring `json:"facility"`
}

// NewDeviceCreateInFacilityInputAllOf instantiates a new DeviceCreateInFacilityInputAllOf object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewDeviceCreateInFacilityInputAllOf(facility NullableAnyOfarraystring) *DeviceCreateInFacilityInputAllOf {
	this := DeviceCreateInFacilityInputAllOf{}
	this.Facility = facility
	return &this
}

// NewDeviceCreateInFacilityInputAllOfWithDefaults instantiates a new DeviceCreateInFacilityInputAllOf object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewDeviceCreateInFacilityInputAllOfWithDefaults() *DeviceCreateInFacilityInputAllOf {
	this := DeviceCreateInFacilityInputAllOf{}
	return &this
}

// GetFacility returns the Facility field value
// If the value is explicit nil, the zero value for AnyOfarraystring will be returned
func (o *DeviceCreateInFacilityInputAllOf) GetFacility() AnyOfarraystring {
	if o == nil || o.Facility.Get() == nil {
		var ret AnyOfarraystring
		return ret
	}

	return *o.Facility.Get()
}

// GetFacilityOk returns a tuple with the Facility field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *DeviceCreateInFacilityInputAllOf) GetFacilityOk() (*AnyOfarraystring, bool) {
	if o == nil {
		return nil, false
	}
	return o.Facility.Get(), o.Facility.IsSet()
}

// SetFacility sets field value
func (o *DeviceCreateInFacilityInputAllOf) SetFacility(v AnyOfarraystring) {
	o.Facility.Set(&v)
}

func (o DeviceCreateInFacilityInputAllOf) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["facility"] = o.Facility.Get()
	}
	return json.Marshal(toSerialize)
}

type NullableDeviceCreateInFacilityInputAllOf struct {
	value *DeviceCreateInFacilityInputAllOf
	isSet bool
}

func (v NullableDeviceCreateInFacilityInputAllOf) Get() *DeviceCreateInFacilityInputAllOf {
	return v.value
}

func (v *NullableDeviceCreateInFacilityInputAllOf) Set(val *DeviceCreateInFacilityInputAllOf) {
	v.value = val
	v.isSet = true
}

func (v NullableDeviceCreateInFacilityInputAllOf) IsSet() bool {
	return v.isSet
}

func (v *NullableDeviceCreateInFacilityInputAllOf) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableDeviceCreateInFacilityInputAllOf(val *DeviceCreateInFacilityInputAllOf) *NullableDeviceCreateInFacilityInputAllOf {
	return &NullableDeviceCreateInFacilityInputAllOf{value: val, isSet: true}
}

func (v NullableDeviceCreateInFacilityInputAllOf) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableDeviceCreateInFacilityInputAllOf) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
