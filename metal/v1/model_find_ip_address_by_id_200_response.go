/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
	_ "time"
)

// FindIPAddressById200Response - struct for FindIPAddressById200Response
type FindIPAddressById200Response struct {
	FindDeviceById200ResponseIpAddressesInner *FindDeviceById200ResponseIpAddressesInner
	FindIPAddressById200ResponseOneOf         *FindIPAddressById200ResponseOneOf
	FindIPAddressById200ResponseOneOf1        *FindIPAddressById200ResponseOneOf1
}

// FindDeviceById200ResponseIpAddressesInnerAsFindIPAddressById200Response is a convenience function that returns FindDeviceById200ResponseIpAddressesInner wrapped in FindIPAddressById200Response
func FindDeviceById200ResponseIpAddressesInnerAsFindIPAddressById200Response(v *FindDeviceById200ResponseIpAddressesInner) FindIPAddressById200Response {
	return FindIPAddressById200Response{
		FindDeviceById200ResponseIpAddressesInner: v,
	}
}

// FindIPAddressById200ResponseOneOfAsFindIPAddressById200Response is a convenience function that returns FindIPAddressById200ResponseOneOf wrapped in FindIPAddressById200Response
func FindIPAddressById200ResponseOneOfAsFindIPAddressById200Response(v *FindIPAddressById200ResponseOneOf) FindIPAddressById200Response {
	return FindIPAddressById200Response{
		FindIPAddressById200ResponseOneOf: v,
	}
}

// FindIPAddressById200ResponseOneOf1AsFindIPAddressById200Response is a convenience function that returns FindIPAddressById200ResponseOneOf1 wrapped in FindIPAddressById200Response
func FindIPAddressById200ResponseOneOf1AsFindIPAddressById200Response(v *FindIPAddressById200ResponseOneOf1) FindIPAddressById200Response {
	return FindIPAddressById200Response{
		FindIPAddressById200ResponseOneOf1: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *FindIPAddressById200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FindDeviceById200ResponseIpAddressesInner
	err = newStrictDecoder(data).Decode(&dst.FindDeviceById200ResponseIpAddressesInner)
	if err == nil {
		jsonFindDeviceById200ResponseIpAddressesInner, _ := json.Marshal(dst.FindDeviceById200ResponseIpAddressesInner)
		if string(jsonFindDeviceById200ResponseIpAddressesInner) == "{}" { // empty struct
			dst.FindDeviceById200ResponseIpAddressesInner = nil
		} else {
			match++
		}
	} else {
		dst.FindDeviceById200ResponseIpAddressesInner = nil
	}

	// try to unmarshal data into FindIPAddressById200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.FindIPAddressById200ResponseOneOf)
	if err == nil {
		jsonFindIPAddressById200ResponseOneOf, _ := json.Marshal(dst.FindIPAddressById200ResponseOneOf)
		if string(jsonFindIPAddressById200ResponseOneOf) == "{}" { // empty struct
			dst.FindIPAddressById200ResponseOneOf = nil
		} else {
			match++
		}
	} else {
		dst.FindIPAddressById200ResponseOneOf = nil
	}

	// try to unmarshal data into FindIPAddressById200ResponseOneOf1
	err = newStrictDecoder(data).Decode(&dst.FindIPAddressById200ResponseOneOf1)
	if err == nil {
		jsonFindIPAddressById200ResponseOneOf1, _ := json.Marshal(dst.FindIPAddressById200ResponseOneOf1)
		if string(jsonFindIPAddressById200ResponseOneOf1) == "{}" { // empty struct
			dst.FindIPAddressById200ResponseOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.FindIPAddressById200ResponseOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FindDeviceById200ResponseIpAddressesInner = nil
		dst.FindIPAddressById200ResponseOneOf = nil
		dst.FindIPAddressById200ResponseOneOf1 = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(FindIPAddressById200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(FindIPAddressById200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FindIPAddressById200Response) MarshalJSON() ([]byte, error) {
	if src.FindDeviceById200ResponseIpAddressesInner != nil {
		return json.Marshal(&src.FindDeviceById200ResponseIpAddressesInner)
	}

	if src.FindIPAddressById200ResponseOneOf != nil {
		return json.Marshal(&src.FindIPAddressById200ResponseOneOf)
	}

	if src.FindIPAddressById200ResponseOneOf1 != nil {
		return json.Marshal(&src.FindIPAddressById200ResponseOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FindIPAddressById200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.FindDeviceById200ResponseIpAddressesInner != nil {
		return obj.FindDeviceById200ResponseIpAddressesInner
	}

	if obj.FindIPAddressById200ResponseOneOf != nil {
		return obj.FindIPAddressById200ResponseOneOf
	}

	if obj.FindIPAddressById200ResponseOneOf1 != nil {
		return obj.FindIPAddressById200ResponseOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableFindIPAddressById200Response struct {
	value *FindIPAddressById200Response
	isSet bool
}

func (v NullableFindIPAddressById200Response) Get() *FindIPAddressById200Response {
	return v.value
}

func (v *NullableFindIPAddressById200Response) Set(val *FindIPAddressById200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableFindIPAddressById200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableFindIPAddressById200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindIPAddressById200Response(val *FindIPAddressById200Response) *NullableFindIPAddressById200Response {
	return &NullableFindIPAddressById200Response{value: val, isSet: true}
}

func (v NullableFindIPAddressById200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindIPAddressById200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
