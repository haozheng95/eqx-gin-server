/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// FindDeviceMetadataByID200ResponseNetwork struct for FindDeviceMetadataByID200ResponseNetwork
type FindDeviceMetadataByID200ResponseNetwork struct {
	Addresses  []string                                         `json:"addresses,omitempty"`
	Interfaces []map[string]interface{}                         `json:"interfaces,omitempty"`
	Network    *FindDeviceMetadataByID200ResponseNetworkNetwork `json:"network,omitempty"`
}

// NewFindDeviceMetadataByID200ResponseNetwork instantiates a new FindDeviceMetadataByID200ResponseNetwork object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFindDeviceMetadataByID200ResponseNetwork() *FindDeviceMetadataByID200ResponseNetwork {
	this := FindDeviceMetadataByID200ResponseNetwork{}
	return &this
}

// NewFindDeviceMetadataByID200ResponseNetworkWithDefaults instantiates a new FindDeviceMetadataByID200ResponseNetwork object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFindDeviceMetadataByID200ResponseNetworkWithDefaults() *FindDeviceMetadataByID200ResponseNetwork {
	this := FindDeviceMetadataByID200ResponseNetwork{}
	return &this
}

// GetAddresses returns the Addresses field value if set, zero value otherwise.
func (o *FindDeviceMetadataByID200ResponseNetwork) GetAddresses() []string {
	if o == nil || o.Addresses == nil {
		var ret []string
		return ret
	}
	return o.Addresses
}

// GetAddressesOk returns a tuple with the Addresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindDeviceMetadataByID200ResponseNetwork) GetAddressesOk() ([]string, bool) {
	if o == nil || o.Addresses == nil {
		return nil, false
	}
	return o.Addresses, true
}

// HasAddresses returns a boolean if a field has been set.
func (o *FindDeviceMetadataByID200ResponseNetwork) HasAddresses() bool {
	if o != nil && o.Addresses != nil {
		return true
	}

	return false
}

// SetAddresses gets a reference to the given []string and assigns it to the Addresses field.
func (o *FindDeviceMetadataByID200ResponseNetwork) SetAddresses(v []string) {
	o.Addresses = v
}

// GetInterfaces returns the Interfaces field value if set, zero value otherwise.
func (o *FindDeviceMetadataByID200ResponseNetwork) GetInterfaces() []map[string]interface{} {
	if o == nil || o.Interfaces == nil {
		var ret []map[string]interface{}
		return ret
	}
	return o.Interfaces
}

// GetInterfacesOk returns a tuple with the Interfaces field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindDeviceMetadataByID200ResponseNetwork) GetInterfacesOk() ([]map[string]interface{}, bool) {
	if o == nil || o.Interfaces == nil {
		return nil, false
	}
	return o.Interfaces, true
}

// HasInterfaces returns a boolean if a field has been set.
func (o *FindDeviceMetadataByID200ResponseNetwork) HasInterfaces() bool {
	if o != nil && o.Interfaces != nil {
		return true
	}

	return false
}

// SetInterfaces gets a reference to the given []map[string]interface{} and assigns it to the Interfaces field.
func (o *FindDeviceMetadataByID200ResponseNetwork) SetInterfaces(v []map[string]interface{}) {
	o.Interfaces = v
}

// GetNetwork returns the Network field value if set, zero value otherwise.
func (o *FindDeviceMetadataByID200ResponseNetwork) GetNetwork() FindDeviceMetadataByID200ResponseNetworkNetwork {
	if o == nil || o.Network == nil {
		var ret FindDeviceMetadataByID200ResponseNetworkNetwork
		return ret
	}
	return *o.Network
}

// GetNetworkOk returns a tuple with the Network field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindDeviceMetadataByID200ResponseNetwork) GetNetworkOk() (*FindDeviceMetadataByID200ResponseNetworkNetwork, bool) {
	if o == nil || o.Network == nil {
		return nil, false
	}
	return o.Network, true
}

// HasNetwork returns a boolean if a field has been set.
func (o *FindDeviceMetadataByID200ResponseNetwork) HasNetwork() bool {
	if o != nil && o.Network != nil {
		return true
	}

	return false
}

// SetNetwork gets a reference to the given FindDeviceMetadataByID200ResponseNetworkNetwork and assigns it to the Network field.
func (o *FindDeviceMetadataByID200ResponseNetwork) SetNetwork(v FindDeviceMetadataByID200ResponseNetworkNetwork) {
	o.Network = &v
}

func (o FindDeviceMetadataByID200ResponseNetwork) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Addresses != nil {
		toSerialize["addresses"] = o.Addresses
	}
	if o.Interfaces != nil {
		toSerialize["interfaces"] = o.Interfaces
	}
	if o.Network != nil {
		toSerialize["network"] = o.Network
	}
	return json.Marshal(toSerialize)
}

type NullableFindDeviceMetadataByID200ResponseNetwork struct {
	value *FindDeviceMetadataByID200ResponseNetwork
	isSet bool
}

func (v NullableFindDeviceMetadataByID200ResponseNetwork) Get() *FindDeviceMetadataByID200ResponseNetwork {
	return v.value
}

func (v *NullableFindDeviceMetadataByID200ResponseNetwork) Set(val *FindDeviceMetadataByID200ResponseNetwork) {
	v.value = val
	v.isSet = true
}

func (v NullableFindDeviceMetadataByID200ResponseNetwork) IsSet() bool {
	return v.isSet
}

func (v *NullableFindDeviceMetadataByID200ResponseNetwork) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindDeviceMetadataByID200ResponseNetwork(val *FindDeviceMetadataByID200ResponseNetwork) *NullableFindDeviceMetadataByID200ResponseNetwork {
	return &NullableFindDeviceMetadataByID200ResponseNetwork{value: val, isSet: true}
}

func (v NullableFindDeviceMetadataByID200ResponseNetwork) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindDeviceMetadataByID200ResponseNetwork) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
