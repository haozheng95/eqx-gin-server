/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// VrfIpReservationList struct for VrfIpReservationList
type VrfIpReservationList struct {
	IpAddresses []FindIPAddressById200ResponseOneOf1 `json:"ip_addresses,omitempty"`
}

// NewVrfIpReservationList instantiates a new VrfIpReservationList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVrfIpReservationList() *VrfIpReservationList {
	this := VrfIpReservationList{}
	return &this
}

// NewVrfIpReservationListWithDefaults instantiates a new VrfIpReservationList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVrfIpReservationListWithDefaults() *VrfIpReservationList {
	this := VrfIpReservationList{}
	return &this
}

// GetIpAddresses returns the IpAddresses field value if set, zero value otherwise.
func (o *VrfIpReservationList) GetIpAddresses() []FindIPAddressById200ResponseOneOf1 {
	if o == nil || o.IpAddresses == nil {
		var ret []FindIPAddressById200ResponseOneOf1
		return ret
	}
	return o.IpAddresses
}

// GetIpAddressesOk returns a tuple with the IpAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfIpReservationList) GetIpAddressesOk() ([]FindIPAddressById200ResponseOneOf1, bool) {
	if o == nil || o.IpAddresses == nil {
		return nil, false
	}
	return o.IpAddresses, true
}

// HasIpAddresses returns a boolean if a field has been set.
func (o *VrfIpReservationList) HasIpAddresses() bool {
	if o != nil && o.IpAddresses != nil {
		return true
	}

	return false
}

// SetIpAddresses gets a reference to the given []FindIPAddressById200ResponseOneOf1 and assigns it to the IpAddresses field.
func (o *VrfIpReservationList) SetIpAddresses(v []FindIPAddressById200ResponseOneOf1) {
	o.IpAddresses = v
}

func (o VrfIpReservationList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.IpAddresses != nil {
		toSerialize["ip_addresses"] = o.IpAddresses
	}
	return json.Marshal(toSerialize)
}

type NullableVrfIpReservationList struct {
	value *VrfIpReservationList
	isSet bool
}

func (v NullableVrfIpReservationList) Get() *VrfIpReservationList {
	return v.value
}

func (v *NullableVrfIpReservationList) Set(val *VrfIpReservationList) {
	v.value = val
	v.isSet = true
}

func (v NullableVrfIpReservationList) IsSet() bool {
	return v.isSet
}

func (v *NullableVrfIpReservationList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVrfIpReservationList(val *VrfIpReservationList) *NullableVrfIpReservationList {
	return &NullableVrfIpReservationList{value: val, isSet: true}
}

func (v NullableVrfIpReservationList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVrfIpReservationList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
