/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// CreateInterconnectionPortVirtualCircuitRequest - struct for CreateInterconnectionPortVirtualCircuitRequest
type CreateInterconnectionPortVirtualCircuitRequest struct {
	CreateInterconnectionPortVirtualCircuitRequestOneOf  *CreateInterconnectionPortVirtualCircuitRequestOneOf
	CreateInterconnectionPortVirtualCircuitRequestOneOf1 *CreateInterconnectionPortVirtualCircuitRequestOneOf1
}

// CreateInterconnectionPortVirtualCircuitRequestOneOfAsCreateInterconnectionPortVirtualCircuitRequest is a convenience function that returns CreateInterconnectionPortVirtualCircuitRequestOneOf wrapped in CreateInterconnectionPortVirtualCircuitRequest
func CreateInterconnectionPortVirtualCircuitRequestOneOfAsCreateInterconnectionPortVirtualCircuitRequest(v *CreateInterconnectionPortVirtualCircuitRequestOneOf) CreateInterconnectionPortVirtualCircuitRequest {
	return CreateInterconnectionPortVirtualCircuitRequest{
		CreateInterconnectionPortVirtualCircuitRequestOneOf: v,
	}
}

// CreateInterconnectionPortVirtualCircuitRequestOneOf1AsCreateInterconnectionPortVirtualCircuitRequest is a convenience function that returns CreateInterconnectionPortVirtualCircuitRequestOneOf1 wrapped in CreateInterconnectionPortVirtualCircuitRequest
func CreateInterconnectionPortVirtualCircuitRequestOneOf1AsCreateInterconnectionPortVirtualCircuitRequest(v *CreateInterconnectionPortVirtualCircuitRequestOneOf1) CreateInterconnectionPortVirtualCircuitRequest {
	return CreateInterconnectionPortVirtualCircuitRequest{
		CreateInterconnectionPortVirtualCircuitRequestOneOf1: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *CreateInterconnectionPortVirtualCircuitRequest) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into CreateInterconnectionPortVirtualCircuitRequestOneOf
	err = newStrictDecoder(data).Decode(&dst.CreateInterconnectionPortVirtualCircuitRequestOneOf)
	if err == nil {
		jsonCreateInterconnectionPortVirtualCircuitRequestOneOf, _ := json.Marshal(dst.CreateInterconnectionPortVirtualCircuitRequestOneOf)
		if string(jsonCreateInterconnectionPortVirtualCircuitRequestOneOf) == "{}" { // empty struct
			dst.CreateInterconnectionPortVirtualCircuitRequestOneOf = nil
		} else {
			match++
		}
	} else {
		dst.CreateInterconnectionPortVirtualCircuitRequestOneOf = nil
	}

	// try to unmarshal data into CreateInterconnectionPortVirtualCircuitRequestOneOf1
	err = newStrictDecoder(data).Decode(&dst.CreateInterconnectionPortVirtualCircuitRequestOneOf1)
	if err == nil {
		jsonCreateInterconnectionPortVirtualCircuitRequestOneOf1, _ := json.Marshal(dst.CreateInterconnectionPortVirtualCircuitRequestOneOf1)
		if string(jsonCreateInterconnectionPortVirtualCircuitRequestOneOf1) == "{}" { // empty struct
			dst.CreateInterconnectionPortVirtualCircuitRequestOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.CreateInterconnectionPortVirtualCircuitRequestOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.CreateInterconnectionPortVirtualCircuitRequestOneOf = nil
		dst.CreateInterconnectionPortVirtualCircuitRequestOneOf1 = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(CreateInterconnectionPortVirtualCircuitRequest)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(CreateInterconnectionPortVirtualCircuitRequest)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src CreateInterconnectionPortVirtualCircuitRequest) MarshalJSON() ([]byte, error) {
	if src.CreateInterconnectionPortVirtualCircuitRequestOneOf != nil {
		return json.Marshal(&src.CreateInterconnectionPortVirtualCircuitRequestOneOf)
	}

	if src.CreateInterconnectionPortVirtualCircuitRequestOneOf1 != nil {
		return json.Marshal(&src.CreateInterconnectionPortVirtualCircuitRequestOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *CreateInterconnectionPortVirtualCircuitRequest) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.CreateInterconnectionPortVirtualCircuitRequestOneOf != nil {
		return obj.CreateInterconnectionPortVirtualCircuitRequestOneOf
	}

	if obj.CreateInterconnectionPortVirtualCircuitRequestOneOf1 != nil {
		return obj.CreateInterconnectionPortVirtualCircuitRequestOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableCreateInterconnectionPortVirtualCircuitRequest struct {
	value *CreateInterconnectionPortVirtualCircuitRequest
	isSet bool
}

func (v NullableCreateInterconnectionPortVirtualCircuitRequest) Get() *CreateInterconnectionPortVirtualCircuitRequest {
	return v.value
}

func (v *NullableCreateInterconnectionPortVirtualCircuitRequest) Set(val *CreateInterconnectionPortVirtualCircuitRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateInterconnectionPortVirtualCircuitRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateInterconnectionPortVirtualCircuitRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateInterconnectionPortVirtualCircuitRequest(val *CreateInterconnectionPortVirtualCircuitRequest) *NullableCreateInterconnectionPortVirtualCircuitRequest {
	return &NullableCreateInterconnectionPortVirtualCircuitRequest{value: val, isSet: true}
}

func (v NullableCreateInterconnectionPortVirtualCircuitRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateInterconnectionPortVirtualCircuitRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
