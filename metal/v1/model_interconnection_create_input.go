/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// InterconnectionCreateInput struct for InterconnectionCreateInput
type InterconnectionCreateInput struct {
	ContactEmail *string `json:"contact_email,omitempty"`
	Description  *string `json:"description,omitempty"`
	// A Metro ID or code. For interconnections with Dedicated Ports, this will be the location of the issued Dedicated Ports. When creating Fabric VCs (Metal Billed), this is where interconnection will be originating from, as we pre-authorize the use of one of our shared ports as the origin of the interconnection using A-Side service tokens. We only allow local connections for Fabric VCs (Metal Billed), so the destination location must be the same as the origin. For Fabric VCs (Fabric Billed), or shared connections, this will be the destination of the interconnection. We allow remote connections for Fabric VCs (Fabric Billed), so the origin of the interconnection can be a different metro set here. For access to Fabric VCs, which are not generally available, please contact our Support Team for more details.
	Metro string `json:"metro"`
	// The mode of the interconnection (only relevant to Dedicated Ports). Fabric VCs won't have this field. Can be either 'standard' or 'tunnel'.   The default mode of an interconnection on a Dedicated Port is 'standard'. The mode can only be changed when there are no associated virtual circuits on the interconnection.   In tunnel mode, an 802.1q tunnel is added to a port to send/receive double tagged packets from server instances.
	Mode    *string `json:"mode,omitempty"`
	Name    string  `json:"name"`
	Project *string `json:"project,omitempty"`
	// Either 'primary' or 'redundant'.
	Redundancy string `json:"redundancy"`
	// Either 'a_side' or 'z_side'. Setting this field to 'a_side' will create an interconnection with Fabric VCs (Metal Billed). Setting this field to 'z_side' will create an interconnection with Fabric VCs (Fabric Billed). This is required when the 'type' is 'shared', but this is not applicable when the 'type' is 'dedicated'. This parameter is included in the specification as a developer preview and is generally unavailable. Please contact our Support team for more details.
	ServiceTokenType *string `json:"service_token_type,omitempty"`
	// A interconnection speed, in bps, mbps, or gbps. For Dedicated Ports, this can be 10Gbps or 100Gbps. For Fabric VCs, this represents the maximum speed of the interconnection. For Fabric VCs (Metal Billed), this can only be one of the following:  ''50mbps'', ''200mbps'', ''500mbps'', ''1gbps'', ''2gbps'', ''5gbps'' or ''10gbps'', and is required for creation. For Fabric VCs (Fabric Billed), this field will always default to ''10gbps'' even if it is not provided. For example, ''500000000'', ''50m'', or' ''500mbps'' will all work as valid inputs.
	Speed *int32   `json:"speed,omitempty"`
	Tags  []string `json:"tags,omitempty"`
	// Either 'shared' or 'dedicated'. The 'shared' type represents shared interconnections, or also known as Fabric VCs. The 'dedicated' type represents dedicated interconnections, or also known as Dedicated Ports.
	Type string `json:"type"`
	// A list of one or two metro-based VLANs that will be set on the virtual circuits of primary and/or secondary (if redundant) interconnections respectively when creating Fabric VCs. VLANs can also be set after the interconnection is created, but are required to fully activate the interconnection. This parameter is included in the specification as a developer preview and is generally unavailable. Please contact our Support team for more details.
	Vlans []int32 `json:"vlans,omitempty"`
}

// NewInterconnectionCreateInput instantiates a new InterconnectionCreateInput object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterconnectionCreateInput(metro string, name string, redundancy string, type_ string) *InterconnectionCreateInput {
	this := InterconnectionCreateInput{}
	this.Metro = metro
	this.Name = name
	this.Redundancy = redundancy
	this.Type = type_
	return &this
}

// NewInterconnectionCreateInputWithDefaults instantiates a new InterconnectionCreateInput object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterconnectionCreateInputWithDefaults() *InterconnectionCreateInput {
	this := InterconnectionCreateInput{}
	return &this
}

// GetContactEmail returns the ContactEmail field value if set, zero value otherwise.
func (o *InterconnectionCreateInput) GetContactEmail() string {
	if o == nil || o.ContactEmail == nil {
		var ret string
		return ret
	}
	return *o.ContactEmail
}

// GetContactEmailOk returns a tuple with the ContactEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterconnectionCreateInput) GetContactEmailOk() (*string, bool) {
	if o == nil || o.ContactEmail == nil {
		return nil, false
	}
	return o.ContactEmail, true
}

// HasContactEmail returns a boolean if a field has been set.
func (o *InterconnectionCreateInput) HasContactEmail() bool {
	if o != nil && o.ContactEmail != nil {
		return true
	}

	return false
}

// SetContactEmail gets a reference to the given string and assigns it to the ContactEmail field.
func (o *InterconnectionCreateInput) SetContactEmail(v string) {
	o.ContactEmail = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *InterconnectionCreateInput) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterconnectionCreateInput) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *InterconnectionCreateInput) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *InterconnectionCreateInput) SetDescription(v string) {
	o.Description = &v
}

// GetMetro returns the Metro field value
func (o *InterconnectionCreateInput) GetMetro() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Metro
}

// GetMetroOk returns a tuple with the Metro field value
// and a boolean to check if the value has been set.
func (o *InterconnectionCreateInput) GetMetroOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Metro, true
}

// SetMetro sets field value
func (o *InterconnectionCreateInput) SetMetro(v string) {
	o.Metro = v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *InterconnectionCreateInput) GetMode() string {
	if o == nil || o.Mode == nil {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterconnectionCreateInput) GetModeOk() (*string, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *InterconnectionCreateInput) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *InterconnectionCreateInput) SetMode(v string) {
	o.Mode = &v
}

// GetName returns the Name field value
func (o *InterconnectionCreateInput) GetName() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Name
}

// GetNameOk returns a tuple with the Name field value
// and a boolean to check if the value has been set.
func (o *InterconnectionCreateInput) GetNameOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Name, true
}

// SetName sets field value
func (o *InterconnectionCreateInput) SetName(v string) {
	o.Name = v
}

// GetProject returns the Project field value if set, zero value otherwise.
func (o *InterconnectionCreateInput) GetProject() string {
	if o == nil || o.Project == nil {
		var ret string
		return ret
	}
	return *o.Project
}

// GetProjectOk returns a tuple with the Project field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterconnectionCreateInput) GetProjectOk() (*string, bool) {
	if o == nil || o.Project == nil {
		return nil, false
	}
	return o.Project, true
}

// HasProject returns a boolean if a field has been set.
func (o *InterconnectionCreateInput) HasProject() bool {
	if o != nil && o.Project != nil {
		return true
	}

	return false
}

// SetProject gets a reference to the given string and assigns it to the Project field.
func (o *InterconnectionCreateInput) SetProject(v string) {
	o.Project = &v
}

// GetRedundancy returns the Redundancy field value
func (o *InterconnectionCreateInput) GetRedundancy() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Redundancy
}

// GetRedundancyOk returns a tuple with the Redundancy field value
// and a boolean to check if the value has been set.
func (o *InterconnectionCreateInput) GetRedundancyOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Redundancy, true
}

// SetRedundancy sets field value
func (o *InterconnectionCreateInput) SetRedundancy(v string) {
	o.Redundancy = v
}

// GetServiceTokenType returns the ServiceTokenType field value if set, zero value otherwise.
func (o *InterconnectionCreateInput) GetServiceTokenType() string {
	if o == nil || o.ServiceTokenType == nil {
		var ret string
		return ret
	}
	return *o.ServiceTokenType
}

// GetServiceTokenTypeOk returns a tuple with the ServiceTokenType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterconnectionCreateInput) GetServiceTokenTypeOk() (*string, bool) {
	if o == nil || o.ServiceTokenType == nil {
		return nil, false
	}
	return o.ServiceTokenType, true
}

// HasServiceTokenType returns a boolean if a field has been set.
func (o *InterconnectionCreateInput) HasServiceTokenType() bool {
	if o != nil && o.ServiceTokenType != nil {
		return true
	}

	return false
}

// SetServiceTokenType gets a reference to the given string and assigns it to the ServiceTokenType field.
func (o *InterconnectionCreateInput) SetServiceTokenType(v string) {
	o.ServiceTokenType = &v
}

// GetSpeed returns the Speed field value if set, zero value otherwise.
func (o *InterconnectionCreateInput) GetSpeed() int32 {
	if o == nil || o.Speed == nil {
		var ret int32
		return ret
	}
	return *o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterconnectionCreateInput) GetSpeedOk() (*int32, bool) {
	if o == nil || o.Speed == nil {
		return nil, false
	}
	return o.Speed, true
}

// HasSpeed returns a boolean if a field has been set.
func (o *InterconnectionCreateInput) HasSpeed() bool {
	if o != nil && o.Speed != nil {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given int32 and assigns it to the Speed field.
func (o *InterconnectionCreateInput) SetSpeed(v int32) {
	o.Speed = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *InterconnectionCreateInput) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterconnectionCreateInput) GetTagsOk() ([]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *InterconnectionCreateInput) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *InterconnectionCreateInput) SetTags(v []string) {
	o.Tags = v
}

// GetType returns the Type field value
func (o *InterconnectionCreateInput) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *InterconnectionCreateInput) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *InterconnectionCreateInput) SetType(v string) {
	o.Type = v
}

// GetVlans returns the Vlans field value if set, zero value otherwise.
func (o *InterconnectionCreateInput) GetVlans() []int32 {
	if o == nil || o.Vlans == nil {
		var ret []int32
		return ret
	}
	return o.Vlans
}

// GetVlansOk returns a tuple with the Vlans field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *InterconnectionCreateInput) GetVlansOk() ([]int32, bool) {
	if o == nil || o.Vlans == nil {
		return nil, false
	}
	return o.Vlans, true
}

// HasVlans returns a boolean if a field has been set.
func (o *InterconnectionCreateInput) HasVlans() bool {
	if o != nil && o.Vlans != nil {
		return true
	}

	return false
}

// SetVlans gets a reference to the given []int32 and assigns it to the Vlans field.
func (o *InterconnectionCreateInput) SetVlans(v []int32) {
	o.Vlans = v
}

func (o InterconnectionCreateInput) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ContactEmail != nil {
		toSerialize["contact_email"] = o.ContactEmail
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if true {
		toSerialize["metro"] = o.Metro
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	if true {
		toSerialize["name"] = o.Name
	}
	if o.Project != nil {
		toSerialize["project"] = o.Project
	}
	if true {
		toSerialize["redundancy"] = o.Redundancy
	}
	if o.ServiceTokenType != nil {
		toSerialize["service_token_type"] = o.ServiceTokenType
	}
	if o.Speed != nil {
		toSerialize["speed"] = o.Speed
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if true {
		toSerialize["type"] = o.Type
	}
	if o.Vlans != nil {
		toSerialize["vlans"] = o.Vlans
	}
	return json.Marshal(toSerialize)
}

type NullableInterconnectionCreateInput struct {
	value *InterconnectionCreateInput
	isSet bool
}

func (v NullableInterconnectionCreateInput) Get() *InterconnectionCreateInput {
	return v.value
}

func (v *NullableInterconnectionCreateInput) Set(val *InterconnectionCreateInput) {
	v.value = val
	v.isSet = true
}

func (v NullableInterconnectionCreateInput) IsSet() bool {
	return v.isSet
}

func (v *NullableInterconnectionCreateInput) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterconnectionCreateInput(val *InterconnectionCreateInput) *NullableInterconnectionCreateInput {
	return &NullableInterconnectionCreateInput{value: val, isSet: true}
}

func (v NullableInterconnectionCreateInput) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterconnectionCreateInput) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
