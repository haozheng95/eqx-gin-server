/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
)

// CreateDeviceRequestOneOf1AllOfFacility The datacenter where the device should be created.  Either metro or facility must be provided.  The API will accept either a single facility `{ \"facility\": \"f1\" }`, or it can be instructed to create the device in the best available datacenter `{ \"facility\": \"any\" }`.  Additionally it is possible to set a prioritized location selection. For example `{ \"facility\": [\"f3\", \"f2\", \"any\"] }` can be used to prioritize `f3` and then `f2` before accepting `any` facility. If none of the facilities provided have availability for the requested device the request will fail.
type CreateDeviceRequestOneOf1AllOfFacility struct {
	strList *[]string
	string  *string
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *CreateDeviceRequestOneOf1AllOfFacility) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into []string
	err = json.Unmarshal(data, &dst.strList)
	if err == nil {
		jsonstring, _ := json.Marshal(dst.strList)
		if string(jsonstring) == "{}" { // empty struct
			dst.strList = nil
		} else {
			return nil // data stored in dst.[]string, return on the first match
		}
	} else {
		dst.strList = nil
	}

	// try to unmarshal JSON data into string
	err = json.Unmarshal(data, &dst.string)
	if err == nil {
		jsonstring, _ := json.Marshal(dst.string)
		if string(jsonstring) == "{}" { // empty struct
			dst.string = nil
		} else {
			return nil // data stored in dst.string, return on the first match
		}
	} else {
		dst.string = nil
	}

	return fmt.Errorf("Data failed to match schemas in anyOf(CreateDeviceRequestOneOf1AllOfFacility)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *CreateDeviceRequestOneOf1AllOfFacility) MarshalJSON() ([]byte, error) {
	if src.strList != nil {
		return json.Marshal(&src.strList)
	}

	if src.string != nil {
		return json.Marshal(&src.string)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableCreateDeviceRequestOneOf1AllOfFacility struct {
	value *CreateDeviceRequestOneOf1AllOfFacility
	isSet bool
}

func (v NullableCreateDeviceRequestOneOf1AllOfFacility) Get() *CreateDeviceRequestOneOf1AllOfFacility {
	return v.value
}

func (v *NullableCreateDeviceRequestOneOf1AllOfFacility) Set(val *CreateDeviceRequestOneOf1AllOfFacility) {
	v.value = val
	v.isSet = true
}

func (v NullableCreateDeviceRequestOneOf1AllOfFacility) IsSet() bool {
	return v.isSet
}

func (v *NullableCreateDeviceRequestOneOf1AllOfFacility) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCreateDeviceRequestOneOf1AllOfFacility(val *CreateDeviceRequestOneOf1AllOfFacility) *NullableCreateDeviceRequestOneOf1AllOfFacility {
	return &NullableCreateDeviceRequestOneOf1AllOfFacility{value: val, isSet: true}
}

func (v NullableCreateDeviceRequestOneOf1AllOfFacility) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCreateDeviceRequestOneOf1AllOfFacility) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
