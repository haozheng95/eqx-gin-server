/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// FindDeviceById200ResponsePlanSpecsNicsInner struct for FindDeviceById200ResponsePlanSpecsNicsInner
type FindDeviceById200ResponsePlanSpecsNicsInner struct {
	Count *int32  `json:"count,omitempty"`
	Type  *string `json:"type,omitempty"`
}

// NewFindDeviceById200ResponsePlanSpecsNicsInner instantiates a new FindDeviceById200ResponsePlanSpecsNicsInner object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFindDeviceById200ResponsePlanSpecsNicsInner() *FindDeviceById200ResponsePlanSpecsNicsInner {
	this := FindDeviceById200ResponsePlanSpecsNicsInner{}
	return &this
}

// NewFindDeviceById200ResponsePlanSpecsNicsInnerWithDefaults instantiates a new FindDeviceById200ResponsePlanSpecsNicsInner object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFindDeviceById200ResponsePlanSpecsNicsInnerWithDefaults() *FindDeviceById200ResponsePlanSpecsNicsInner {
	this := FindDeviceById200ResponsePlanSpecsNicsInner{}
	return &this
}

// GetCount returns the Count field value if set, zero value otherwise.
func (o *FindDeviceById200ResponsePlanSpecsNicsInner) GetCount() int32 {
	if o == nil || o.Count == nil {
		var ret int32
		return ret
	}
	return *o.Count
}

// GetCountOk returns a tuple with the Count field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindDeviceById200ResponsePlanSpecsNicsInner) GetCountOk() (*int32, bool) {
	if o == nil || o.Count == nil {
		return nil, false
	}
	return o.Count, true
}

// HasCount returns a boolean if a field has been set.
func (o *FindDeviceById200ResponsePlanSpecsNicsInner) HasCount() bool {
	if o != nil && o.Count != nil {
		return true
	}

	return false
}

// SetCount gets a reference to the given int32 and assigns it to the Count field.
func (o *FindDeviceById200ResponsePlanSpecsNicsInner) SetCount(v int32) {
	o.Count = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *FindDeviceById200ResponsePlanSpecsNicsInner) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindDeviceById200ResponsePlanSpecsNicsInner) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *FindDeviceById200ResponsePlanSpecsNicsInner) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *FindDeviceById200ResponsePlanSpecsNicsInner) SetType(v string) {
	o.Type = &v
}

func (o FindDeviceById200ResponsePlanSpecsNicsInner) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Count != nil {
		toSerialize["count"] = o.Count
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableFindDeviceById200ResponsePlanSpecsNicsInner struct {
	value *FindDeviceById200ResponsePlanSpecsNicsInner
	isSet bool
}

func (v NullableFindDeviceById200ResponsePlanSpecsNicsInner) Get() *FindDeviceById200ResponsePlanSpecsNicsInner {
	return v.value
}

func (v *NullableFindDeviceById200ResponsePlanSpecsNicsInner) Set(val *FindDeviceById200ResponsePlanSpecsNicsInner) {
	v.value = val
	v.isSet = true
}

func (v NullableFindDeviceById200ResponsePlanSpecsNicsInner) IsSet() bool {
	return v.isSet
}

func (v *NullableFindDeviceById200ResponsePlanSpecsNicsInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindDeviceById200ResponsePlanSpecsNicsInner(val *FindDeviceById200ResponsePlanSpecsNicsInner) *NullableFindDeviceById200ResponsePlanSpecsNicsInner {
	return &NullableFindDeviceById200ResponsePlanSpecsNicsInner{value: val, isSet: true}
}

func (v NullableFindDeviceById200ResponsePlanSpecsNicsInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindDeviceById200ResponsePlanSpecsNicsInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
