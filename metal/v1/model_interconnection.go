/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// Interconnection struct for Interconnection
type Interconnection struct {
	ContactEmail *string                               `json:"contact_email,omitempty"`
	Description  *string                               `json:"description,omitempty"`
	Facility     *FindBatchById200ResponseDevicesInner `json:"facility,omitempty"`
	Id           *string                               `json:"id,omitempty"`
	Metro        *GetInterconnection200ResponseMetro   `json:"metro,omitempty"`
	// The mode of the interconnection (only relevant to Dedicated Ports). Shared connections won't have this field. Can be either 'standard' or 'tunnel'.   The default mode of an interconnection on a Dedicated Port is 'standard'. The mode can only be changed when there are no associated virtual circuits on the interconnection.   In tunnel mode, an 802.1q tunnel is added to a port to send/receive double tagged packets from server instances.
	Mode         *string                               `json:"mode,omitempty"`
	Name         *string                               `json:"name,omitempty"`
	Organization *FindBatchById200ResponseDevicesInner `json:"organization,omitempty"`
	// For Fabric VCs, these represent Virtual Port(s) created for the interconnection. For dedicated interconnections, these represent the Dedicated Port(s).
	Ports []GetInterconnection200ResponsePortsInner `json:"ports,omitempty"`
	// Either 'primary', meaning a single interconnection, or 'redundant', meaning a redundant interconnection.
	Redundancy *string `json:"redundancy,omitempty"`
	// For Fabric VCs (Metal Billed), this will show details of the A-Side service tokens issued for the interconnection. For Fabric VCs (Fabric Billed), this will show the details of the Z-Side service tokens issued for the interconnection. Dedicated interconnections will not have any service tokens issued. There will be one per interconnection, so for redundant interconnections, there should be two service tokens issued. For access to Fabric VCs, which are not generally available, please contact our Support Team for more details.
	ServiceTokens []GetInterconnection200ResponseServiceTokensInner `json:"service_tokens,omitempty"`
	// For interconnections on Dedicated Ports and shared connections, this represents the interconnection's speed in bps. For Fabric VCs, this field refers to the maximum speed of the interconnection in bps. This value will default to 10Gbps for Fabric VCs (Fabric Billed). For access to Fabric VCs, which are not generally available, please contact our Support Team for more details.
	Speed  *int32   `json:"speed,omitempty"`
	Status *string  `json:"status,omitempty"`
	Tags   []string `json:"tags,omitempty"`
	// This token is used for shared interconnections to be used as the Fabric Token. This field will be deprecated when we release Fabric VCs. With the release of Fabric VCs that use A-Side and Z-Side service tokens, we will no longer issue these tokens for any shared interconnections created after the release of Fabric VCs. This token will also never be issued for dedicated interconnections. For access to Fabric VCs, which are not generally available, please contact our Support Team for more details.
	Token *string `json:"token,omitempty"`
	// The 'shared' type of interconnection refers to shared connections, or later also known as Fabric Virtual Connections (or Fabric VCs). The 'dedicated' type of interconnection refers to interconnections created with Dedicated Ports. For access to Fabric VCs, which are not generally available, please contact our Support Team for more details.
	Type *string `json:"type,omitempty"`
}

// NewInterconnection instantiates a new Interconnection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewInterconnection() *Interconnection {
	this := Interconnection{}
	return &this
}

// NewInterconnectionWithDefaults instantiates a new Interconnection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewInterconnectionWithDefaults() *Interconnection {
	this := Interconnection{}
	return &this
}

// GetContactEmail returns the ContactEmail field value if set, zero value otherwise.
func (o *Interconnection) GetContactEmail() string {
	if o == nil || o.ContactEmail == nil {
		var ret string
		return ret
	}
	return *o.ContactEmail
}

// GetContactEmailOk returns a tuple with the ContactEmail field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interconnection) GetContactEmailOk() (*string, bool) {
	if o == nil || o.ContactEmail == nil {
		return nil, false
	}
	return o.ContactEmail, true
}

// HasContactEmail returns a boolean if a field has been set.
func (o *Interconnection) HasContactEmail() bool {
	if o != nil && o.ContactEmail != nil {
		return true
	}

	return false
}

// SetContactEmail gets a reference to the given string and assigns it to the ContactEmail field.
func (o *Interconnection) SetContactEmail(v string) {
	o.ContactEmail = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Interconnection) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interconnection) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Interconnection) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Interconnection) SetDescription(v string) {
	o.Description = &v
}

// GetFacility returns the Facility field value if set, zero value otherwise.
func (o *Interconnection) GetFacility() FindBatchById200ResponseDevicesInner {
	if o == nil || o.Facility == nil {
		var ret FindBatchById200ResponseDevicesInner
		return ret
	}
	return *o.Facility
}

// GetFacilityOk returns a tuple with the Facility field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interconnection) GetFacilityOk() (*FindBatchById200ResponseDevicesInner, bool) {
	if o == nil || o.Facility == nil {
		return nil, false
	}
	return o.Facility, true
}

// HasFacility returns a boolean if a field has been set.
func (o *Interconnection) HasFacility() bool {
	if o != nil && o.Facility != nil {
		return true
	}

	return false
}

// SetFacility gets a reference to the given FindBatchById200ResponseDevicesInner and assigns it to the Facility field.
func (o *Interconnection) SetFacility(v FindBatchById200ResponseDevicesInner) {
	o.Facility = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Interconnection) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interconnection) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Interconnection) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Interconnection) SetId(v string) {
	o.Id = &v
}

// GetMetro returns the Metro field value if set, zero value otherwise.
func (o *Interconnection) GetMetro() GetInterconnection200ResponseMetro {
	if o == nil || o.Metro == nil {
		var ret GetInterconnection200ResponseMetro
		return ret
	}
	return *o.Metro
}

// GetMetroOk returns a tuple with the Metro field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interconnection) GetMetroOk() (*GetInterconnection200ResponseMetro, bool) {
	if o == nil || o.Metro == nil {
		return nil, false
	}
	return o.Metro, true
}

// HasMetro returns a boolean if a field has been set.
func (o *Interconnection) HasMetro() bool {
	if o != nil && o.Metro != nil {
		return true
	}

	return false
}

// SetMetro gets a reference to the given GetInterconnection200ResponseMetro and assigns it to the Metro field.
func (o *Interconnection) SetMetro(v GetInterconnection200ResponseMetro) {
	o.Metro = &v
}

// GetMode returns the Mode field value if set, zero value otherwise.
func (o *Interconnection) GetMode() string {
	if o == nil || o.Mode == nil {
		var ret string
		return ret
	}
	return *o.Mode
}

// GetModeOk returns a tuple with the Mode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interconnection) GetModeOk() (*string, bool) {
	if o == nil || o.Mode == nil {
		return nil, false
	}
	return o.Mode, true
}

// HasMode returns a boolean if a field has been set.
func (o *Interconnection) HasMode() bool {
	if o != nil && o.Mode != nil {
		return true
	}

	return false
}

// SetMode gets a reference to the given string and assigns it to the Mode field.
func (o *Interconnection) SetMode(v string) {
	o.Mode = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Interconnection) GetName() string {
	if o == nil || o.Name == nil {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interconnection) GetNameOk() (*string, bool) {
	if o == nil || o.Name == nil {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Interconnection) HasName() bool {
	if o != nil && o.Name != nil {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Interconnection) SetName(v string) {
	o.Name = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *Interconnection) GetOrganization() FindBatchById200ResponseDevicesInner {
	if o == nil || o.Organization == nil {
		var ret FindBatchById200ResponseDevicesInner
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interconnection) GetOrganizationOk() (*FindBatchById200ResponseDevicesInner, bool) {
	if o == nil || o.Organization == nil {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *Interconnection) HasOrganization() bool {
	if o != nil && o.Organization != nil {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given FindBatchById200ResponseDevicesInner and assigns it to the Organization field.
func (o *Interconnection) SetOrganization(v FindBatchById200ResponseDevicesInner) {
	o.Organization = &v
}

// GetPorts returns the Ports field value if set, zero value otherwise.
func (o *Interconnection) GetPorts() []GetInterconnection200ResponsePortsInner {
	if o == nil || o.Ports == nil {
		var ret []GetInterconnection200ResponsePortsInner
		return ret
	}
	return o.Ports
}

// GetPortsOk returns a tuple with the Ports field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interconnection) GetPortsOk() ([]GetInterconnection200ResponsePortsInner, bool) {
	if o == nil || o.Ports == nil {
		return nil, false
	}
	return o.Ports, true
}

// HasPorts returns a boolean if a field has been set.
func (o *Interconnection) HasPorts() bool {
	if o != nil && o.Ports != nil {
		return true
	}

	return false
}

// SetPorts gets a reference to the given []GetInterconnection200ResponsePortsInner and assigns it to the Ports field.
func (o *Interconnection) SetPorts(v []GetInterconnection200ResponsePortsInner) {
	o.Ports = v
}

// GetRedundancy returns the Redundancy field value if set, zero value otherwise.
func (o *Interconnection) GetRedundancy() string {
	if o == nil || o.Redundancy == nil {
		var ret string
		return ret
	}
	return *o.Redundancy
}

// GetRedundancyOk returns a tuple with the Redundancy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interconnection) GetRedundancyOk() (*string, bool) {
	if o == nil || o.Redundancy == nil {
		return nil, false
	}
	return o.Redundancy, true
}

// HasRedundancy returns a boolean if a field has been set.
func (o *Interconnection) HasRedundancy() bool {
	if o != nil && o.Redundancy != nil {
		return true
	}

	return false
}

// SetRedundancy gets a reference to the given string and assigns it to the Redundancy field.
func (o *Interconnection) SetRedundancy(v string) {
	o.Redundancy = &v
}

// GetServiceTokens returns the ServiceTokens field value if set, zero value otherwise.
func (o *Interconnection) GetServiceTokens() []GetInterconnection200ResponseServiceTokensInner {
	if o == nil || o.ServiceTokens == nil {
		var ret []GetInterconnection200ResponseServiceTokensInner
		return ret
	}
	return o.ServiceTokens
}

// GetServiceTokensOk returns a tuple with the ServiceTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interconnection) GetServiceTokensOk() ([]GetInterconnection200ResponseServiceTokensInner, bool) {
	if o == nil || o.ServiceTokens == nil {
		return nil, false
	}
	return o.ServiceTokens, true
}

// HasServiceTokens returns a boolean if a field has been set.
func (o *Interconnection) HasServiceTokens() bool {
	if o != nil && o.ServiceTokens != nil {
		return true
	}

	return false
}

// SetServiceTokens gets a reference to the given []GetInterconnection200ResponseServiceTokensInner and assigns it to the ServiceTokens field.
func (o *Interconnection) SetServiceTokens(v []GetInterconnection200ResponseServiceTokensInner) {
	o.ServiceTokens = v
}

// GetSpeed returns the Speed field value if set, zero value otherwise.
func (o *Interconnection) GetSpeed() int32 {
	if o == nil || o.Speed == nil {
		var ret int32
		return ret
	}
	return *o.Speed
}

// GetSpeedOk returns a tuple with the Speed field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interconnection) GetSpeedOk() (*int32, bool) {
	if o == nil || o.Speed == nil {
		return nil, false
	}
	return o.Speed, true
}

// HasSpeed returns a boolean if a field has been set.
func (o *Interconnection) HasSpeed() bool {
	if o != nil && o.Speed != nil {
		return true
	}

	return false
}

// SetSpeed gets a reference to the given int32 and assigns it to the Speed field.
func (o *Interconnection) SetSpeed(v int32) {
	o.Speed = &v
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Interconnection) GetStatus() string {
	if o == nil || o.Status == nil {
		var ret string
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interconnection) GetStatusOk() (*string, bool) {
	if o == nil || o.Status == nil {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Interconnection) HasStatus() bool {
	if o != nil && o.Status != nil {
		return true
	}

	return false
}

// SetStatus gets a reference to the given string and assigns it to the Status field.
func (o *Interconnection) SetStatus(v string) {
	o.Status = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *Interconnection) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interconnection) GetTagsOk() ([]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *Interconnection) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *Interconnection) SetTags(v []string) {
	o.Tags = v
}

// GetToken returns the Token field value if set, zero value otherwise.
func (o *Interconnection) GetToken() string {
	if o == nil || o.Token == nil {
		var ret string
		return ret
	}
	return *o.Token
}

// GetTokenOk returns a tuple with the Token field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interconnection) GetTokenOk() (*string, bool) {
	if o == nil || o.Token == nil {
		return nil, false
	}
	return o.Token, true
}

// HasToken returns a boolean if a field has been set.
func (o *Interconnection) HasToken() bool {
	if o != nil && o.Token != nil {
		return true
	}

	return false
}

// SetToken gets a reference to the given string and assigns it to the Token field.
func (o *Interconnection) SetToken(v string) {
	o.Token = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Interconnection) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Interconnection) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Interconnection) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Interconnection) SetType(v string) {
	o.Type = &v
}

func (o Interconnection) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.ContactEmail != nil {
		toSerialize["contact_email"] = o.ContactEmail
	}
	if o.Description != nil {
		toSerialize["description"] = o.Description
	}
	if o.Facility != nil {
		toSerialize["facility"] = o.Facility
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Metro != nil {
		toSerialize["metro"] = o.Metro
	}
	if o.Mode != nil {
		toSerialize["mode"] = o.Mode
	}
	if o.Name != nil {
		toSerialize["name"] = o.Name
	}
	if o.Organization != nil {
		toSerialize["organization"] = o.Organization
	}
	if o.Ports != nil {
		toSerialize["ports"] = o.Ports
	}
	if o.Redundancy != nil {
		toSerialize["redundancy"] = o.Redundancy
	}
	if o.ServiceTokens != nil {
		toSerialize["service_tokens"] = o.ServiceTokens
	}
	if o.Speed != nil {
		toSerialize["speed"] = o.Speed
	}
	if o.Status != nil {
		toSerialize["status"] = o.Status
	}
	if o.Tags != nil {
		toSerialize["tags"] = o.Tags
	}
	if o.Token != nil {
		toSerialize["token"] = o.Token
	}
	if o.Type != nil {
		toSerialize["type"] = o.Type
	}
	return json.Marshal(toSerialize)
}

type NullableInterconnection struct {
	value *Interconnection
	isSet bool
}

func (v NullableInterconnection) Get() *Interconnection {
	return v.value
}

func (v *NullableInterconnection) Set(val *Interconnection) {
	v.value = val
	v.isSet = true
}

func (v NullableInterconnection) IsSet() bool {
	return v.isSet
}

func (v *NullableInterconnection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableInterconnection(val *Interconnection) *NullableInterconnection {
	return &NullableInterconnection{value: val, isSet: true}
}

func (v NullableInterconnection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableInterconnection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
