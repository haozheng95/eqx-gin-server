/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
	_ "time"
)

// FindMetalGatewayById200Response - struct for FindMetalGatewayById200Response
type FindMetalGatewayById200Response struct {
	FindMetalGatewayById200ResponseOneOf  *FindMetalGatewayById200ResponseOneOf
	FindMetalGatewayById200ResponseOneOf1 *FindMetalGatewayById200ResponseOneOf1
}

// FindMetalGatewayById200ResponseOneOfAsFindMetalGatewayById200Response is a convenience function that returns FindMetalGatewayById200ResponseOneOf wrapped in FindMetalGatewayById200Response
func FindMetalGatewayById200ResponseOneOfAsFindMetalGatewayById200Response(v *FindMetalGatewayById200ResponseOneOf) FindMetalGatewayById200Response {
	return FindMetalGatewayById200Response{
		FindMetalGatewayById200ResponseOneOf: v,
	}
}

// FindMetalGatewayById200ResponseOneOf1AsFindMetalGatewayById200Response is a convenience function that returns FindMetalGatewayById200ResponseOneOf1 wrapped in FindMetalGatewayById200Response
func FindMetalGatewayById200ResponseOneOf1AsFindMetalGatewayById200Response(v *FindMetalGatewayById200ResponseOneOf1) FindMetalGatewayById200Response {
	return FindMetalGatewayById200Response{
		FindMetalGatewayById200ResponseOneOf1: v,
	}
}

// Unmarshal JSON data into one of the pointers in the struct
func (dst *FindMetalGatewayById200Response) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into FindMetalGatewayById200ResponseOneOf
	err = newStrictDecoder(data).Decode(&dst.FindMetalGatewayById200ResponseOneOf)
	if err == nil {
		jsonFindMetalGatewayById200ResponseOneOf, _ := json.Marshal(dst.FindMetalGatewayById200ResponseOneOf)
		if string(jsonFindMetalGatewayById200ResponseOneOf) == "{}" { // empty struct
			dst.FindMetalGatewayById200ResponseOneOf = nil
		} else {
			match++
		}
	} else {
		dst.FindMetalGatewayById200ResponseOneOf = nil
	}

	// try to unmarshal data into FindMetalGatewayById200ResponseOneOf1
	err = newStrictDecoder(data).Decode(&dst.FindMetalGatewayById200ResponseOneOf1)
	if err == nil {
		jsonFindMetalGatewayById200ResponseOneOf1, _ := json.Marshal(dst.FindMetalGatewayById200ResponseOneOf1)
		if string(jsonFindMetalGatewayById200ResponseOneOf1) == "{}" { // empty struct
			dst.FindMetalGatewayById200ResponseOneOf1 = nil
		} else {
			match++
		}
	} else {
		dst.FindMetalGatewayById200ResponseOneOf1 = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.FindMetalGatewayById200ResponseOneOf = nil
		dst.FindMetalGatewayById200ResponseOneOf1 = nil

		return fmt.Errorf("Data matches more than one schema in oneOf(FindMetalGatewayById200Response)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("Data failed to match schemas in oneOf(FindMetalGatewayById200Response)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src FindMetalGatewayById200Response) MarshalJSON() ([]byte, error) {
	if src.FindMetalGatewayById200ResponseOneOf != nil {
		return json.Marshal(&src.FindMetalGatewayById200ResponseOneOf)
	}

	if src.FindMetalGatewayById200ResponseOneOf1 != nil {
		return json.Marshal(&src.FindMetalGatewayById200ResponseOneOf1)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *FindMetalGatewayById200Response) GetActualInstance() interface{} {
	if obj == nil {
		return nil
	}
	if obj.FindMetalGatewayById200ResponseOneOf != nil {
		return obj.FindMetalGatewayById200ResponseOneOf
	}

	if obj.FindMetalGatewayById200ResponseOneOf1 != nil {
		return obj.FindMetalGatewayById200ResponseOneOf1
	}

	// all schemas are nil
	return nil
}

type NullableFindMetalGatewayById200Response struct {
	value *FindMetalGatewayById200Response
	isSet bool
}

func (v NullableFindMetalGatewayById200Response) Get() *FindMetalGatewayById200Response {
	return v.value
}

func (v *NullableFindMetalGatewayById200Response) Set(val *FindMetalGatewayById200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableFindMetalGatewayById200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableFindMetalGatewayById200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindMetalGatewayById200Response(val *FindMetalGatewayById200Response) *NullableFindMetalGatewayById200Response {
	return &NullableFindMetalGatewayById200Response{value: val, isSet: true}
}

func (v NullableFindMetalGatewayById200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindMetalGatewayById200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
