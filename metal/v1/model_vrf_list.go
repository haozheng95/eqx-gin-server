/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// VrfList struct for VrfList
type VrfList struct {
	Vrfs []GetInterconnection200ResponsePortsInnerVirtualCircuitsVirtualCircuitsInnerAnyOf1Vrf `json:"vrfs,omitempty"`
}

// NewVrfList instantiates a new VrfList object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVrfList() *VrfList {
	this := VrfList{}
	return &this
}

// NewVrfListWithDefaults instantiates a new VrfList object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVrfListWithDefaults() *VrfList {
	this := VrfList{}
	return &this
}

// GetVrfs returns the Vrfs field value if set, zero value otherwise.
func (o *VrfList) GetVrfs() []GetInterconnection200ResponsePortsInnerVirtualCircuitsVirtualCircuitsInnerAnyOf1Vrf {
	if o == nil || o.Vrfs == nil {
		var ret []GetInterconnection200ResponsePortsInnerVirtualCircuitsVirtualCircuitsInnerAnyOf1Vrf
		return ret
	}
	return o.Vrfs
}

// GetVrfsOk returns a tuple with the Vrfs field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VrfList) GetVrfsOk() ([]GetInterconnection200ResponsePortsInnerVirtualCircuitsVirtualCircuitsInnerAnyOf1Vrf, bool) {
	if o == nil || o.Vrfs == nil {
		return nil, false
	}
	return o.Vrfs, true
}

// HasVrfs returns a boolean if a field has been set.
func (o *VrfList) HasVrfs() bool {
	if o != nil && o.Vrfs != nil {
		return true
	}

	return false
}

// SetVrfs gets a reference to the given []GetInterconnection200ResponsePortsInnerVirtualCircuitsVirtualCircuitsInnerAnyOf1Vrf and assigns it to the Vrfs field.
func (o *VrfList) SetVrfs(v []GetInterconnection200ResponsePortsInnerVirtualCircuitsVirtualCircuitsInnerAnyOf1Vrf) {
	o.Vrfs = v
}

func (o VrfList) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Vrfs != nil {
		toSerialize["vrfs"] = o.Vrfs
	}
	return json.Marshal(toSerialize)
}

type NullableVrfList struct {
	value *VrfList
	isSet bool
}

func (v NullableVrfList) Get() *VrfList {
	return v.value
}

func (v *NullableVrfList) Set(val *VrfList) {
	v.value = val
	v.isSet = true
}

func (v NullableVrfList) IsSet() bool {
	return v.isSet
}

func (v *NullableVrfList) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVrfList(val *VrfList) *NullableVrfList {
	return &NullableVrfList{value: val, isSet: true}
}

func (v NullableVrfList) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVrfList) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
