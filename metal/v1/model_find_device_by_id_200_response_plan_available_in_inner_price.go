/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
)

// FindDeviceById200ResponsePlanAvailableInInnerPrice struct for FindDeviceById200ResponsePlanAvailableInInnerPrice
type FindDeviceById200ResponsePlanAvailableInInnerPrice struct {
	Hour *float32 `json:"hour,omitempty"`
}

// NewFindDeviceById200ResponsePlanAvailableInInnerPrice instantiates a new FindDeviceById200ResponsePlanAvailableInInnerPrice object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFindDeviceById200ResponsePlanAvailableInInnerPrice() *FindDeviceById200ResponsePlanAvailableInInnerPrice {
	this := FindDeviceById200ResponsePlanAvailableInInnerPrice{}
	return &this
}

// NewFindDeviceById200ResponsePlanAvailableInInnerPriceWithDefaults instantiates a new FindDeviceById200ResponsePlanAvailableInInnerPrice object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFindDeviceById200ResponsePlanAvailableInInnerPriceWithDefaults() *FindDeviceById200ResponsePlanAvailableInInnerPrice {
	this := FindDeviceById200ResponsePlanAvailableInInnerPrice{}
	return &this
}

// GetHour returns the Hour field value if set, zero value otherwise.
func (o *FindDeviceById200ResponsePlanAvailableInInnerPrice) GetHour() float32 {
	if o == nil || o.Hour == nil {
		var ret float32
		return ret
	}
	return *o.Hour
}

// GetHourOk returns a tuple with the Hour field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindDeviceById200ResponsePlanAvailableInInnerPrice) GetHourOk() (*float32, bool) {
	if o == nil || o.Hour == nil {
		return nil, false
	}
	return o.Hour, true
}

// HasHour returns a boolean if a field has been set.
func (o *FindDeviceById200ResponsePlanAvailableInInnerPrice) HasHour() bool {
	if o != nil && o.Hour != nil {
		return true
	}

	return false
}

// SetHour gets a reference to the given float32 and assigns it to the Hour field.
func (o *FindDeviceById200ResponsePlanAvailableInInnerPrice) SetHour(v float32) {
	o.Hour = &v
}

func (o FindDeviceById200ResponsePlanAvailableInInnerPrice) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Hour != nil {
		toSerialize["hour"] = o.Hour
	}
	return json.Marshal(toSerialize)
}

type NullableFindDeviceById200ResponsePlanAvailableInInnerPrice struct {
	value *FindDeviceById200ResponsePlanAvailableInInnerPrice
	isSet bool
}

func (v NullableFindDeviceById200ResponsePlanAvailableInInnerPrice) Get() *FindDeviceById200ResponsePlanAvailableInInnerPrice {
	return v.value
}

func (v *NullableFindDeviceById200ResponsePlanAvailableInInnerPrice) Set(val *FindDeviceById200ResponsePlanAvailableInInnerPrice) {
	v.value = val
	v.isSet = true
}

func (v NullableFindDeviceById200ResponsePlanAvailableInInnerPrice) IsSet() bool {
	return v.isSet
}

func (v *NullableFindDeviceById200ResponsePlanAvailableInInnerPrice) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindDeviceById200ResponsePlanAvailableInInnerPrice(val *FindDeviceById200ResponsePlanAvailableInInnerPrice) *NullableFindDeviceById200ResponsePlanAvailableInInnerPrice {
	return &NullableFindDeviceById200ResponsePlanAvailableInInnerPrice{value: val, isSet: true}
}

func (v NullableFindDeviceById200ResponsePlanAvailableInInnerPrice) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindDeviceById200ResponsePlanAvailableInInnerPrice) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
