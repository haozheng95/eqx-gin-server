/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"time"
)

// FindInvitationById200Response struct for FindInvitationById200Response
type FindInvitationById200Response struct {
	CreatedAt    *time.Time                             `json:"created_at,omitempty"`
	Href         *string                                `json:"href,omitempty"`
	Id           *string                                `json:"id,omitempty"`
	Invitation   *FindBatchById200ResponseDevicesInner  `json:"invitation,omitempty"`
	InvitedBy    *FindBatchById200ResponseDevicesInner  `json:"invited_by,omitempty"`
	Invitee      *string                                `json:"invitee,omitempty"`
	Nonce        *string                                `json:"nonce,omitempty"`
	Organization *FindBatchById200ResponseDevicesInner  `json:"organization,omitempty"`
	Projects     []FindBatchById200ResponseDevicesInner `json:"projects,omitempty"`
	Roles        []string                               `json:"roles,omitempty"`
	UpdatedAt    *time.Time                             `json:"updated_at,omitempty"`
}

// NewFindInvitationById200Response instantiates a new FindInvitationById200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFindInvitationById200Response() *FindInvitationById200Response {
	this := FindInvitationById200Response{}
	return &this
}

// NewFindInvitationById200ResponseWithDefaults instantiates a new FindInvitationById200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFindInvitationById200ResponseWithDefaults() *FindInvitationById200Response {
	this := FindInvitationById200Response{}
	return &this
}

// GetCreatedAt returns the CreatedAt field value if set, zero value otherwise.
func (o *FindInvitationById200Response) GetCreatedAt() time.Time {
	if o == nil || o.CreatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.CreatedAt
}

// GetCreatedAtOk returns a tuple with the CreatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindInvitationById200Response) GetCreatedAtOk() (*time.Time, bool) {
	if o == nil || o.CreatedAt == nil {
		return nil, false
	}
	return o.CreatedAt, true
}

// HasCreatedAt returns a boolean if a field has been set.
func (o *FindInvitationById200Response) HasCreatedAt() bool {
	if o != nil && o.CreatedAt != nil {
		return true
	}

	return false
}

// SetCreatedAt gets a reference to the given time.Time and assigns it to the CreatedAt field.
func (o *FindInvitationById200Response) SetCreatedAt(v time.Time) {
	o.CreatedAt = &v
}

// GetHref returns the Href field value if set, zero value otherwise.
func (o *FindInvitationById200Response) GetHref() string {
	if o == nil || o.Href == nil {
		var ret string
		return ret
	}
	return *o.Href
}

// GetHrefOk returns a tuple with the Href field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindInvitationById200Response) GetHrefOk() (*string, bool) {
	if o == nil || o.Href == nil {
		return nil, false
	}
	return o.Href, true
}

// HasHref returns a boolean if a field has been set.
func (o *FindInvitationById200Response) HasHref() bool {
	if o != nil && o.Href != nil {
		return true
	}

	return false
}

// SetHref gets a reference to the given string and assigns it to the Href field.
func (o *FindInvitationById200Response) SetHref(v string) {
	o.Href = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *FindInvitationById200Response) GetId() string {
	if o == nil || o.Id == nil {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindInvitationById200Response) GetIdOk() (*string, bool) {
	if o == nil || o.Id == nil {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *FindInvitationById200Response) HasId() bool {
	if o != nil && o.Id != nil {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *FindInvitationById200Response) SetId(v string) {
	o.Id = &v
}

// GetInvitation returns the Invitation field value if set, zero value otherwise.
func (o *FindInvitationById200Response) GetInvitation() FindBatchById200ResponseDevicesInner {
	if o == nil || o.Invitation == nil {
		var ret FindBatchById200ResponseDevicesInner
		return ret
	}
	return *o.Invitation
}

// GetInvitationOk returns a tuple with the Invitation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindInvitationById200Response) GetInvitationOk() (*FindBatchById200ResponseDevicesInner, bool) {
	if o == nil || o.Invitation == nil {
		return nil, false
	}
	return o.Invitation, true
}

// HasInvitation returns a boolean if a field has been set.
func (o *FindInvitationById200Response) HasInvitation() bool {
	if o != nil && o.Invitation != nil {
		return true
	}

	return false
}

// SetInvitation gets a reference to the given FindBatchById200ResponseDevicesInner and assigns it to the Invitation field.
func (o *FindInvitationById200Response) SetInvitation(v FindBatchById200ResponseDevicesInner) {
	o.Invitation = &v
}

// GetInvitedBy returns the InvitedBy field value if set, zero value otherwise.
func (o *FindInvitationById200Response) GetInvitedBy() FindBatchById200ResponseDevicesInner {
	if o == nil || o.InvitedBy == nil {
		var ret FindBatchById200ResponseDevicesInner
		return ret
	}
	return *o.InvitedBy
}

// GetInvitedByOk returns a tuple with the InvitedBy field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindInvitationById200Response) GetInvitedByOk() (*FindBatchById200ResponseDevicesInner, bool) {
	if o == nil || o.InvitedBy == nil {
		return nil, false
	}
	return o.InvitedBy, true
}

// HasInvitedBy returns a boolean if a field has been set.
func (o *FindInvitationById200Response) HasInvitedBy() bool {
	if o != nil && o.InvitedBy != nil {
		return true
	}

	return false
}

// SetInvitedBy gets a reference to the given FindBatchById200ResponseDevicesInner and assigns it to the InvitedBy field.
func (o *FindInvitationById200Response) SetInvitedBy(v FindBatchById200ResponseDevicesInner) {
	o.InvitedBy = &v
}

// GetInvitee returns the Invitee field value if set, zero value otherwise.
func (o *FindInvitationById200Response) GetInvitee() string {
	if o == nil || o.Invitee == nil {
		var ret string
		return ret
	}
	return *o.Invitee
}

// GetInviteeOk returns a tuple with the Invitee field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindInvitationById200Response) GetInviteeOk() (*string, bool) {
	if o == nil || o.Invitee == nil {
		return nil, false
	}
	return o.Invitee, true
}

// HasInvitee returns a boolean if a field has been set.
func (o *FindInvitationById200Response) HasInvitee() bool {
	if o != nil && o.Invitee != nil {
		return true
	}

	return false
}

// SetInvitee gets a reference to the given string and assigns it to the Invitee field.
func (o *FindInvitationById200Response) SetInvitee(v string) {
	o.Invitee = &v
}

// GetNonce returns the Nonce field value if set, zero value otherwise.
func (o *FindInvitationById200Response) GetNonce() string {
	if o == nil || o.Nonce == nil {
		var ret string
		return ret
	}
	return *o.Nonce
}

// GetNonceOk returns a tuple with the Nonce field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindInvitationById200Response) GetNonceOk() (*string, bool) {
	if o == nil || o.Nonce == nil {
		return nil, false
	}
	return o.Nonce, true
}

// HasNonce returns a boolean if a field has been set.
func (o *FindInvitationById200Response) HasNonce() bool {
	if o != nil && o.Nonce != nil {
		return true
	}

	return false
}

// SetNonce gets a reference to the given string and assigns it to the Nonce field.
func (o *FindInvitationById200Response) SetNonce(v string) {
	o.Nonce = &v
}

// GetOrganization returns the Organization field value if set, zero value otherwise.
func (o *FindInvitationById200Response) GetOrganization() FindBatchById200ResponseDevicesInner {
	if o == nil || o.Organization == nil {
		var ret FindBatchById200ResponseDevicesInner
		return ret
	}
	return *o.Organization
}

// GetOrganizationOk returns a tuple with the Organization field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindInvitationById200Response) GetOrganizationOk() (*FindBatchById200ResponseDevicesInner, bool) {
	if o == nil || o.Organization == nil {
		return nil, false
	}
	return o.Organization, true
}

// HasOrganization returns a boolean if a field has been set.
func (o *FindInvitationById200Response) HasOrganization() bool {
	if o != nil && o.Organization != nil {
		return true
	}

	return false
}

// SetOrganization gets a reference to the given FindBatchById200ResponseDevicesInner and assigns it to the Organization field.
func (o *FindInvitationById200Response) SetOrganization(v FindBatchById200ResponseDevicesInner) {
	o.Organization = &v
}

// GetProjects returns the Projects field value if set, zero value otherwise.
func (o *FindInvitationById200Response) GetProjects() []FindBatchById200ResponseDevicesInner {
	if o == nil || o.Projects == nil {
		var ret []FindBatchById200ResponseDevicesInner
		return ret
	}
	return o.Projects
}

// GetProjectsOk returns a tuple with the Projects field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindInvitationById200Response) GetProjectsOk() ([]FindBatchById200ResponseDevicesInner, bool) {
	if o == nil || o.Projects == nil {
		return nil, false
	}
	return o.Projects, true
}

// HasProjects returns a boolean if a field has been set.
func (o *FindInvitationById200Response) HasProjects() bool {
	if o != nil && o.Projects != nil {
		return true
	}

	return false
}

// SetProjects gets a reference to the given []FindBatchById200ResponseDevicesInner and assigns it to the Projects field.
func (o *FindInvitationById200Response) SetProjects(v []FindBatchById200ResponseDevicesInner) {
	o.Projects = v
}

// GetRoles returns the Roles field value if set, zero value otherwise.
func (o *FindInvitationById200Response) GetRoles() []string {
	if o == nil || o.Roles == nil {
		var ret []string
		return ret
	}
	return o.Roles
}

// GetRolesOk returns a tuple with the Roles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindInvitationById200Response) GetRolesOk() ([]string, bool) {
	if o == nil || o.Roles == nil {
		return nil, false
	}
	return o.Roles, true
}

// HasRoles returns a boolean if a field has been set.
func (o *FindInvitationById200Response) HasRoles() bool {
	if o != nil && o.Roles != nil {
		return true
	}

	return false
}

// SetRoles gets a reference to the given []string and assigns it to the Roles field.
func (o *FindInvitationById200Response) SetRoles(v []string) {
	o.Roles = v
}

// GetUpdatedAt returns the UpdatedAt field value if set, zero value otherwise.
func (o *FindInvitationById200Response) GetUpdatedAt() time.Time {
	if o == nil || o.UpdatedAt == nil {
		var ret time.Time
		return ret
	}
	return *o.UpdatedAt
}

// GetUpdatedAtOk returns a tuple with the UpdatedAt field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FindInvitationById200Response) GetUpdatedAtOk() (*time.Time, bool) {
	if o == nil || o.UpdatedAt == nil {
		return nil, false
	}
	return o.UpdatedAt, true
}

// HasUpdatedAt returns a boolean if a field has been set.
func (o *FindInvitationById200Response) HasUpdatedAt() bool {
	if o != nil && o.UpdatedAt != nil {
		return true
	}

	return false
}

// SetUpdatedAt gets a reference to the given time.Time and assigns it to the UpdatedAt field.
func (o *FindInvitationById200Response) SetUpdatedAt(v time.Time) {
	o.UpdatedAt = &v
}

func (o FindInvitationById200Response) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreatedAt != nil {
		toSerialize["created_at"] = o.CreatedAt
	}
	if o.Href != nil {
		toSerialize["href"] = o.Href
	}
	if o.Id != nil {
		toSerialize["id"] = o.Id
	}
	if o.Invitation != nil {
		toSerialize["invitation"] = o.Invitation
	}
	if o.InvitedBy != nil {
		toSerialize["invited_by"] = o.InvitedBy
	}
	if o.Invitee != nil {
		toSerialize["invitee"] = o.Invitee
	}
	if o.Nonce != nil {
		toSerialize["nonce"] = o.Nonce
	}
	if o.Organization != nil {
		toSerialize["organization"] = o.Organization
	}
	if o.Projects != nil {
		toSerialize["projects"] = o.Projects
	}
	if o.Roles != nil {
		toSerialize["roles"] = o.Roles
	}
	if o.UpdatedAt != nil {
		toSerialize["updated_at"] = o.UpdatedAt
	}
	return json.Marshal(toSerialize)
}

type NullableFindInvitationById200Response struct {
	value *FindInvitationById200Response
	isSet bool
}

func (v NullableFindInvitationById200Response) Get() *FindInvitationById200Response {
	return v.value
}

func (v *NullableFindInvitationById200Response) Set(val *FindInvitationById200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableFindInvitationById200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableFindInvitationById200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindInvitationById200Response(val *FindInvitationById200Response) *NullableFindInvitationById200Response {
	return &NullableFindInvitationById200Response{value: val, isSet: true}
}

func (v NullableFindInvitationById200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindInvitationById200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
