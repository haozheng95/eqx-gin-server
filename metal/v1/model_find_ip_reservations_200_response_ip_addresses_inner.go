/*
Metal API

This is the API for Equinix Metal. The API allows you to programmatically interact with all of your Equinix Metal resources, including devices, networks, addresses, organizations, projects, and your user account.  The official API docs are hosted at <https://metal.equinix.com/developers/api>.

API version: 1.0.0
Contact: support@equinixmetal.com
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package v1

import (
	"encoding/json"
	"fmt"
	_ "time"
)

// FindIPReservations200ResponseIpAddressesInner struct for FindIPReservations200ResponseIpAddressesInner
type FindIPReservations200ResponseIpAddressesInner struct {
	FindIPAddressById200ResponseOneOf  *FindIPAddressById200ResponseOneOf
	FindIPAddressById200ResponseOneOf1 *FindIPAddressById200ResponseOneOf1
}

// Unmarshal JSON data into any of the pointers in the struct
func (dst *FindIPReservations200ResponseIpAddressesInner) UnmarshalJSON(data []byte) error {
	var err error
	// try to unmarshal JSON data into FindIPAddressById200ResponseOneOf
	err = json.Unmarshal(data, &dst.FindIPAddressById200ResponseOneOf)
	if err == nil {
		jsonFindIPAddressById200ResponseOneOf, _ := json.Marshal(dst.FindIPAddressById200ResponseOneOf)
		if string(jsonFindIPAddressById200ResponseOneOf) == "{}" { // empty struct
			dst.FindIPAddressById200ResponseOneOf = nil
		} else {
			return nil // data stored in dst.FindIPAddressById200ResponseOneOf, return on the first match
		}
	} else {
		dst.FindIPAddressById200ResponseOneOf = nil
	}

	// try to unmarshal JSON data into FindIPAddressById200ResponseOneOf1
	err = json.Unmarshal(data, &dst.FindIPAddressById200ResponseOneOf1)
	if err == nil {
		jsonFindIPAddressById200ResponseOneOf1, _ := json.Marshal(dst.FindIPAddressById200ResponseOneOf1)
		if string(jsonFindIPAddressById200ResponseOneOf1) == "{}" { // empty struct
			dst.FindIPAddressById200ResponseOneOf1 = nil
		} else {
			return nil // data stored in dst.FindIPAddressById200ResponseOneOf1, return on the first match
		}
	} else {
		dst.FindIPAddressById200ResponseOneOf1 = nil
	}

	return fmt.Errorf("Data failed to match schemas in anyOf(FindIPReservations200ResponseIpAddressesInner)")
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src *FindIPReservations200ResponseIpAddressesInner) MarshalJSON() ([]byte, error) {
	if src.FindIPAddressById200ResponseOneOf != nil {
		return json.Marshal(&src.FindIPAddressById200ResponseOneOf)
	}

	if src.FindIPAddressById200ResponseOneOf1 != nil {
		return json.Marshal(&src.FindIPAddressById200ResponseOneOf1)
	}

	return nil, nil // no data in anyOf schemas
}

type NullableFindIPReservations200ResponseIpAddressesInner struct {
	value *FindIPReservations200ResponseIpAddressesInner
	isSet bool
}

func (v NullableFindIPReservations200ResponseIpAddressesInner) Get() *FindIPReservations200ResponseIpAddressesInner {
	return v.value
}

func (v *NullableFindIPReservations200ResponseIpAddressesInner) Set(val *FindIPReservations200ResponseIpAddressesInner) {
	v.value = val
	v.isSet = true
}

func (v NullableFindIPReservations200ResponseIpAddressesInner) IsSet() bool {
	return v.isSet
}

func (v *NullableFindIPReservations200ResponseIpAddressesInner) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFindIPReservations200ResponseIpAddressesInner(val *FindIPReservations200ResponseIpAddressesInner) *NullableFindIPReservations200ResponseIpAddressesInner {
	return &NullableFindIPReservations200ResponseIpAddressesInner{value: val, isSet: true}
}

func (v NullableFindIPReservations200ResponseIpAddressesInner) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFindIPReservations200ResponseIpAddressesInner) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
